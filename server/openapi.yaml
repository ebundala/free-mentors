openapi: 3.0.2
info:
  title: Free Mentors
  description: >-
    Free Mentors is a social initiative where accomplished professionals become
    role models to        young people to provide free mentorship sessions
  termsOfService: /terms/
  contact:
    email: ebundala@gmail.com
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
  version: 1.0.0
servers:
  - url: 'http://localhost/api/v1'
  - url: 'https://localhost/api/v1'
security:
  - BearerAuth: []
  
paths:
  /auth/signup:
    post:
      tags:
        - User signup
      summary: Create user account
      description: create new user account
      operationId: signup
      requestBody:
        description: a plain user object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        
      responses:
        '201':
          description: signup success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security: []
  /auth/signin:
    post:
      tags:
        - User signin
      summary: signin a user
      description: signin a registered user
      operationId: signin
      requestBody:
        description: a user credentials object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
        required: true
      responses:
        '200':
          description: login success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '400':
          description: failed to login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security: []
  '/user/{userId}':
    summary: users operations
    description: users management endpoint
    patch:
      tags:
        - Change user to mentor
        - Change mentor to user
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
            format: int32
          required: true
          description: Numeric ID of the user to munipulate
      responses:
        '200':
          description: toggle user roles between mentor and mentee
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /mentors:
    summary: get all mentors
    description: 'get all mentors '
    get:
      tags:
        - Fetch all mentors
      responses:
        '200':
          description: succeeded fetching all users who are mentors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  '/mentors/{mentorId} ':
    summary: mentor details
    description: get specific mentor details
    parameters:
      - in: path
        name: mentorId
        schema:
          type: integer
          format: int32
        required: true
    get:
      tags:
        - Fetch specific mentor details
      responses:
        '200':
          description: succeeded fetching mentor details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '404':
          description: mentor doesnt exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  
  /sessions:
    summary: sessions for user
    description: >-
       session request for a mentee  has post or session request for a
       mentor has received
    get:
      tags:
        - Fetch sessions requests
      responses:
        '200':
          description: succeeded fetching users sessions request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '404':
          description: no users sessions request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
    post:
      tags:
        - Create session requests
      requestBody:
       content:
         application/json:
           schema:
            $ref: '#/components/schemas/Session'
      responses:
        '200':
          description: succeeded creating session request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '404':
          description: failed create sessions request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  '/sessions/{sessionId}/accept':
    summary: accept a sessions request
    description: accepts a users sessions request
    parameters:
     - in: path
       name: sessionId
       required: true
       schema:
        type: integer
        format: int32
    patch:
     tags:
      - Accept session request
     responses:
      '200':
        description: succeeded accept request
        content:
         application/json:
          schema:
           $ref: '#/components/schemas/Response'
      '400':
        description: failed accepting request
        content:
         application/json:
          schema:
           $ref: '#/components/schemas/Response'
  '/sessions/{sessionId}/reject':
    summary: reject a sessions request
    description: reject a users sessions request
    parameters:
     - in: path
       name: sessionId
       required: true
       schema:
        type: integer
        format: int32
    patch:
     tags:
      - Reject session request
     responses:
      '200':
        description: succeeded reject request
        content:
         application/json:
          schema:
           $ref: '#/components/schemas/Response'
      '400':
        description: failed reject request
        content:
         application/json:
          schema:
           $ref: '#/components/schemas/Response' 
  '/sessions/{sessionId}/complete':
    summary: complete a sessions request
    description: complete a users sessions request
    parameters:
     - in: path
       name: sessionId
       required: true
       schema:
        type: integer
        format: int32
    patch:
     tags:
      - Complete session request
     responses:
      '200':
        description: succeeded reject request
        content:
         application/json:
          schema:
           $ref: '#/components/schemas/Response'
      '400':
        description: failed reject request
        content:
         application/json:
          schema:
           $ref: '#/components/schemas/Response' 
  '/sessions/{sessionId}/review':
    summary: review a mentor after sessions
    description: review a mentor after a session request
    parameters:
     - in: path
       name: sessionId
       required: true
       schema:
        type: integer
        format: int32
    post:
     tags:
      - Review a mentor
     requestBody:
      content:
       application/json:
        schema:
         $ref: '#/components/schemas/Review'
     responses:
      '200':
          description: succeeded reviewing a mentor
          content:
           application/json:
            schema:
             $ref: '#/components/schemas/Response'
      '400':
          description: failed review a mentor
          content:
           application/json:
            schema:
             $ref: '#/components/schemas/Response' 
    delete:
     tags:
      - Delete a review
     responses:
      '200':
          description: succeeded deleting a review
          content:
           application/json:
            schema:
             $ref: '#/components/schemas/Response'
      '400':
          description: failed to delete a review
          content:
           application/json:
            schema:
             $ref: '#/components/schemas/Response' 
        
        
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        address:
          type: string
        bio:
          type: string
        occupation:
          type: string
        avator:
          type: string
        role:
          type: string
          description: User role
          enum:
            - mentee
            - mentor
            - admin
    Review:
     type: object
     required:
         - score
         - remark
     properties:
       score: 
        type: integer
        format: int8
        maximum: 5
        minimum: 0
        default: 0
       remark:
        type: string
        
       
    Session: 
      type: object
      required: 
      - mentorId
      - menteeId
      - questions
      - menteeEmail
      properties: 
       sessionId:
        type: integer
        format: int32
       mentorId:
        type: string
        format: int32
       menteeId:
        type: string
        format: int32
       questions:
        type: string
       menteeEmail:
        type: string
       status:
          type: string
          description: session status
          enum:
            - pending
            - accepted
            - completed
            - rejected
    
    Credentials:
      type: object
      required:
       - password
       - email
      properties:
        password:
          type: string
        email:
          type: string
    Data:
      type: object
      
    List:
      type: array
      items:
        $ref: '#/components/schemas/Data'
    Response:
      type: object
      required:
            - status
            - data
      properties:
        status:
          type: integer
          format: int32
          default: 200
          
        message:
          type: string
        data:
          default:
            - $ref: '#/components/schemas/Data'
          anyOf:
            - $ref: '#/components/schemas/Data'
            - $ref: '#/components/schemas/List'
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
